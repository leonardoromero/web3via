/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GameManagerInterface extends utils.Interface {
  functions: {
    "airdropPrize(uint256,address)": FunctionFragment;
    "changeTrustedManager(address)": FunctionFragment;
    "claimPrize(uint256)": FunctionFragment;
    "createGame(uint256,uint256)": FunctionFragment;
    "gamePrize(uint256)": FunctionFragment;
    "gameWinners(uint256)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "publishGameResult(uint256,address[])": FunctionFragment;
    "trustedManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "airdropPrize"
      | "changeTrustedManager"
      | "claimPrize"
      | "createGame"
      | "gamePrize"
      | "gameWinners"
      | "games"
      | "publishGameResult"
      | "trustedManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "airdropPrize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTrustedManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gamePrize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameWinners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "games",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publishGameResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTrustedManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gamePrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishGameResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedManager",
    data: BytesLike
  ): Result;

  events: {
    "GameCreated(uint256,uint256,uint256,address)": EventFragment;
    "GameResult(uint256)": EventFragment;
    "PrizeClaimed(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeClaimed"): EventFragment;
}

export interface GameCreatedEventObject {
  gameId: BigNumber;
  prize: BigNumber;
  balance: BigNumber;
  owner: string;
}
export type GameCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  GameCreatedEventObject
>;

export type GameCreatedEventFilter = TypedEventFilter<GameCreatedEvent>;

export interface GameResultEventObject {
  gameId: BigNumber;
}
export type GameResultEvent = TypedEvent<[BigNumber], GameResultEventObject>;

export type GameResultEventFilter = TypedEventFilter<GameResultEvent>;

export interface PrizeClaimedEventObject {
  prize: BigNumber;
  winner: string;
}
export type PrizeClaimedEvent = TypedEvent<
  [BigNumber, string],
  PrizeClaimedEventObject
>;

export type PrizeClaimedEventFilter = TypedEventFilter<PrizeClaimedEvent>;

export interface GameManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropPrize(
      gameId: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTrustedManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGame(
      gameId: PromiseOrValue<BigNumberish>,
      prize: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gamePrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { prize: BigNumber }>;

    gameWinners(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { winners: string[] }>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        balance: BigNumber;
        prize: BigNumber;
        owner: string;
      }
    >;

    publishGameResult(
      gameId: PromiseOrValue<BigNumberish>,
      _winners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedManager(overrides?: CallOverrides): Promise<[string]>;
  };

  airdropPrize(
    gameId: PromiseOrValue<BigNumberish>,
    _winner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTrustedManager(
    newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPrize(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGame(
    gameId: PromiseOrValue<BigNumberish>,
    prize: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gamePrize(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gameWinners(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  games(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      balance: BigNumber;
      prize: BigNumber;
      owner: string;
    }
  >;

  publishGameResult(
    gameId: PromiseOrValue<BigNumberish>,
    _winners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    airdropPrize(
      gameId: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTrustedManager(
      newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGame(
      gameId: PromiseOrValue<BigNumberish>,
      prize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gamePrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameWinners(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        balance: BigNumber;
        prize: BigNumber;
        owner: string;
      }
    >;

    publishGameResult(
      gameId: PromiseOrValue<BigNumberish>,
      _winners: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    trustedManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GameCreated(uint256,uint256,uint256,address)"(
      gameId?: null,
      prize?: null,
      balance?: null,
      owner?: null
    ): GameCreatedEventFilter;
    GameCreated(
      gameId?: null,
      prize?: null,
      balance?: null,
      owner?: null
    ): GameCreatedEventFilter;

    "GameResult(uint256)"(gameId?: null): GameResultEventFilter;
    GameResult(gameId?: null): GameResultEventFilter;

    "PrizeClaimed(uint256,address)"(
      prize?: null,
      winner?: null
    ): PrizeClaimedEventFilter;
    PrizeClaimed(prize?: null, winner?: null): PrizeClaimedEventFilter;
  };

  estimateGas: {
    airdropPrize(
      gameId: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTrustedManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGame(
      gameId: PromiseOrValue<BigNumberish>,
      prize: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gamePrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameWinners(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishGameResult(
      gameId: PromiseOrValue<BigNumberish>,
      _winners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropPrize(
      gameId: PromiseOrValue<BigNumberish>,
      _winner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTrustedManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGame(
      gameId: PromiseOrValue<BigNumberish>,
      prize: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gamePrize(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameWinners(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishGameResult(
      gameId: PromiseOrValue<BigNumberish>,
      _winners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
